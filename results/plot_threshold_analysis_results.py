"""
plot_threshold_analysis_results.py

This script generates a line plot visualizing the consistency of strong gravitational lenses
with the Cold Dark Matter (CDM) total mass threshold. It shows the percentage of lenses
whose inferred total mass surface density falls below the canonical CDM threshold,
as a function of an assumed stellar baryon fraction (f_star).

The plot includes Poisson statistical uncertainties as error bars. It plots multiple
curves to show the sensitivity of the results to different assumed fixed stellar masses
per galaxy (original, 25% reduction, 50% reduction, and 25% increase).

Inputs:
- Four CSV files generated by 'threshold_analysis_for_sensitivity.py', expected to be in
  a 'data/results/' directory relative to where this script is run:
    - 'data/results/stellar_mass_thresholds_results_original.csv'
    - 'data/results/stellar_mass_thresholds_results_25_percent_reduction.csv'
    - 'data/results/stellar_mass_thresholds_results_50_percent_reduction.csv'
    - 'data/results/stellar_mass_thresholds_results_25_percent_increase.csv'
  Each file is expected to have the following columns:
    - 'f_star': Assumed stellar baryon fraction.
    - 'lenses_below_threshold': Count of lenses below the CDM threshold for that f_star.
    - 'percent_below_threshold': Percentage of lenses below the CDM threshold for that f_star.

Outputs:
- Displays a matplotlib plot of the sensitivity curves.
- Saves the plot as a PNG image file (e.g., 'consistency_plot_sensitivity.png')
  in a 'figures/' directory relative to where this script is run.

Usage:
- Ensure you have 'pandas', 'numpy', and 'matplotlib' installed.
- Organize your project directory as follows:
  your_repo_name/
  ├── src/
  │   └── plot_threshold_analysis_results.py (this script)
  ├── data/
  │   └── results/
  │       └── (your generated CSV files here)
  └── figures/
      └── (output plot will be saved here)
- Run this script from the 'src/' directory or adjust 'base_path' accordingly.

Author: Michael Feldstein
Date: 2025-08-02
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os

def plot_threshold_analysis_results(data_configs, output_image_path):
    """
    Generates a line plot showing the percentage of lenses below the CDM threshold
    for different assumed stellar baryon fractions (f_star), with Poisson error bars,
    and saves the plot as an image file.

    Args:
        data_configs (list of tuples): A list where each tuple contains:
                                      (csv_file_path, label_for_plot, color_for_plot)
                                      e.g., [('./data/results/original.csv', 'Original (5e10 Msun)', 'indigo')]
        output_image_path (str): The full path including filename where the plot image will be saved.
    """
    plt.figure(figsize=(10, 6))

    # Calculate total number of lenses (assuming it's constant across all scenarios)
    # This value comes from the analysis script output: "Lenses with valid redshift and positive stellar mass/surface density: 166"
    total_lenses = 166

    # Store the percentage at f_star = 0.03 for the original data to display in the legend
    percent_at_0_03_original = None

    for idx, (csv_path, label, color) in enumerate(data_configs):
        if not os.path.exists(csv_path):
            print(f"Error: Input CSV file not found at '{csv_path}'.")
            print("Please ensure the file is correctly located in the 'data/results/' directory.")
            continue

        try:
            df_results = pd.read_csv(csv_path)
        except Exception as e:
            print(f"Error loading data from '{csv_path}': {e}. Skipping this dataset.")
            continue

        # Ensure required columns are present
        required_cols = ['f_star', 'lenses_below_threshold', 'percent_below_threshold']
        if not all(col in df_results.columns for col in required_cols):
            print(f"Error: Required columns {required_cols} not found in '{csv_path}'. Skipping this dataset.")
            continue

        # Calculate Poisson errors for the percentage
        df_results['error_percent'] = (np.sqrt(df_results['lenses_below_threshold']) / total_lenses) * 100

        plt.errorbar(df_results['f_star'], df_results['percent_below_threshold'],
                     yerr=df_results['error_percent'],
                     marker='o', linestyle='-', color=color, linewidth=2, markersize=6,
                     capsize=4, label=label)

        # Capture the percentage at f_star = 0.03 for the original dataset (first in the list)
        if idx == 0:
            f_star_0_03_row = df_results[df_results['f_star'] == 0.03]
            if not f_star_0_03_row.empty:
                percent_at_0_03_original = f_star_0_03_row['percent_below_threshold'].iloc[0]

    # Add labels and title
    plt.xlabel(r'Assumed Stellar Baryon Fraction ($f_\star$)', fontsize=12)
    plt.ylabel('Percentage of Lenses Below CDM Threshold (%)', fontsize=12)
    plt.title('Consistency of Lenses with CDM Threshold vs. Assumed Stellar Baryon Fraction', fontsize=14)

    # Add a horizontal line at 100% for context
    plt.axhline(100, color='gray', linestyle=':', linewidth=1, label='100% of Lenses')

    # Highlight the 0.03 CDM expectation for f_star on the x-axis
    f_star_0_03_value = 0.03
    if percent_at_0_03_original is not None:
        plt.axvline(f_star_0_03_value, color='red', linestyle='--', linewidth=1.5,
                    label=f'CDM $f_\\star$ expectation (0.03): {percent_at_0_03_original:.1f}% below threshold (Original)')
        plt.plot(f_star_0_03_value, percent_at_0_03_original, 'o', color='red', markersize=8) # Mark the point

    plt.grid(True, linestyle='--', alpha=0.7)
    plt.legend(fontsize=10)
    plt.tight_layout()

    # --- Save the plot to a file ---
    try:
        os.makedirs(os.path.dirname(output_image_path), exist_ok=True) # Ensure directory exists
        plt.savefig(output_image_path, dpi=300, bbox_inches='tight')
        print(f"\nPlot saved successfully to: {output_image_path}")
    except Exception as e:
        print(f"Error saving plot to '{output_image_path}': {e}")

    plt.show() # Display the plot in the notebook output

# --- How to run the plotting function ---
if __name__ == "__main__":
    # Define paths for your input CSV files using relative paths.
    # This assumes your project structure is:
    # your_repo_name/
    # ├── src/
    # │   └── plot_threshold_analysis_results.py (this script)
    # ├── data/
    # │   └── results/
    # │       └── (your generated CSV files here)
    # └── figures/
    #     └── (output plot will be saved here)
    #
    # If you run this script from 'your_repo_name/src/', then:
    base_data_path = '../data/results/'
    base_figures_path = '../figures/'

    original_csv = os.path.join(base_data_path, 'stellar_mass_thresholds_results_original.csv')
    reduced_25_percent_csv = os.path.join(base_data_path, 'stellar_mass_thresholds_results_25_percent_reduction.csv')
    reduced_50_percent_csv = os.path.join(base_data_path, 'stellar_mass_thresholds_results_50_percent_reduction.csv')
    increased_25_percent_csv = os.path.join(base_data_path, 'stellar_mass_thresholds_results_25_percent_increase.csv')

    # Configure the datasets to plot with labels and colors
    plot_configurations = [
        (original_csv, 'Original (5.00e10 Msun)', 'indigo'),
        (reduced_25_percent_csv, '25% Reduction (3.75e10 Msun)', 'green'),
        (reduced_50_percent_csv, '50% Reduction (2.50e10 Msun)', 'orange'),
        (increased_25_percent_csv, '25% Increase (6.25e10 Msun)', 'blue'),
    ]

    # Define the output path for the image file
    output_image_path = os.path.join(base_figures_path, 'consistency_plot_sensitivity.png')

    # Call the plotting function with the list of data configurations and output path
    plot_threshold_analysis_results(data_configs=plot_configurations,
                                    output_image_path=output_image_path)
