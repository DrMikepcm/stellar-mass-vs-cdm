# -*- coding: utf-8 -*-
"""bullet cluster localized

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EzZzmjmPY9oF-dyY_snHJLd_f0Fk0PaL
"""

import os
import time
import numpy as np
import pandas as pd
from lenscat import catalog
from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord, Angle
import astropy.units as u
from astropy.cosmology import Planck18 as cosmo

# Save directory
SAVE_DIR = './lens_stellar_mass_localized'
os.makedirs(SAVE_DIR, exist_ok=True)
print(f"Results will be saved to: {SAVE_DIR}")

# Configure SIMBAD query for galaxies only
custom_simbad = Simbad()
custom_simbad.remove_votable_fields('all')  # clear default fields
custom_simbad.add_votable_fields('otype', 'ra(d)', 'dec(d)')

def query_simbad_galaxies(center_coord, radius_arcmin=0.5):
    """
    Query SIMBAD for galaxies within radius_arcmin around center_coord.
    Returns list of galaxy objects.
    """
    radius_deg = radius_arcmin / 60.0
    try:
        result = custom_simbad.query_region(center_coord, radius=Angle(radius_arcmin, unit=u.arcmin))
        if result is None or len(result) == 0:
            return []
        # Filter only galaxy-type objects (otype starting with 'G')
        galaxies = [row for row in result if str(row['OTYPE']).startswith('G')]
        return galaxies
    except Exception as e:
        print(f"SIMBAD query error at RA={center_coord.ra.deg:.4f}, DEC={center_coord.dec.deg:.4f}: {e}")
        return []

def stellar_mass_surface_density(num_galaxies, redshift, radius_arcmin=0.5, mass_per_galaxy=5e10):
    """
    Compute stellar mass surface density (Msun/Mpc^2) within radius_arcmin.
    """
    if redshift is None or np.isnan(redshift):
        return np.nan
    total_mass = num_galaxies * mass_per_galaxy
    theta_rad = radius_arcmin * (np.pi / 180) / 60  # convert arcmin to radians
    d_a = cosmo.angular_diameter_distance(redshift).to(u.Mpc).value
    radius_mpc = theta_rad * d_a
    area = np.pi * radius_mpc**2
    return total_mass / area

# Load lens catalog and filter for valid redshifts
cat = catalog
df = cat.to_pandas()
df['zlens'] = pd.to_numeric(df['zlens'], errors='coerce')
filtered_df = df.dropna(subset=['zlens']).reset_index(drop=True)

print(f"Total lenses in catalog: {len(df)}")
print(f"Lenses after filtering valid redshifts: {len(filtered_df)}")

results = []

for i, lens in filtered_df.iterrows():
    lens_id = lens['name']
    ra = lens['RA']
    dec = lens['DEC']
    z = lens['zlens']

    center_coord = SkyCoord(ra=ra, dec=dec, unit='deg')
    galaxies = query_simbad_galaxies(center_coord, radius_arcmin=0.5)
    num_galaxies = len(galaxies)

    sigma = stellar_mass_surface_density(num_galaxies, z, radius_arcmin=0.5)

    print(f"Lens {i+1}/{len(filtered_df)}: {lens_id}, z={z:.3f}, Galaxies={num_galaxies}, Sigma={sigma:.2e} Msun/Mpc^2")

    results.append({
        'lens_id': lens_id,
        'ra': ra,
        'dec': dec,
        'redshift': z,
        'num_galaxies': num_galaxies,
        'mass_surface_density_Msun_per_Mpc2': sigma
    })

    # Save incremental results every 20 lenses
    if (i + 1) % 20 == 0 or (i + 1) == len(filtered_df):
        df_results = pd.DataFrame(results)
        save_path = os.path.join(SAVE_DIR, 'localized_stellar_mass.csv')
        df_results.to_csv(save_path, index=False)
        print(f"Saved progress to {save_path}")

print("Done with all lenses!")

import os
import time
import numpy as np
import pandas as pd
from lenscat import catalog
from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord, Angle
from astropy.table import Table
import astropy.units as u

SAVE_DIR = './lens_stellar_mass_localized'
os.makedirs(SAVE_DIR, exist_ok=True)
print(f"Results will be saved to: {SAVE_DIR}")

def query_simbad_galaxies(center_coord, radius_arcmin=0.5):
    """
    Query SIMBAD for galaxies within radius_arcmin of center_coord.
    Returns astropy Table of objects filtered to galaxy types.
    """
    custom_simbad = Simbad()
    custom_simbad.reset_votable_fields()  # clear default fields
    custom_simbad.add_votable_fields('otype', 'ra(d)', 'dec(d)')

    radius_deg = radius_arcmin / 60.0
    try:
        result = custom_simbad.query_region(center_coord, radius=Angle(radius_deg, u.deg))
    except Exception as e:
        print(f"SIMBAD query failed at RA={center_coord.ra.deg}, DEC={center_coord.dec.deg}: {e}")
        return Table(names=['RA', 'DEC', 'OTYPE'], dtype=[float, float, 'S10'])

    if result is None or len(result) == 0:
        return Table(names=['RA', 'DEC', 'OTYPE'], dtype=[float, float, 'S10'])

    # Filter for galaxy types only (e.g. 'Galaxy', 'G', 'Glx', 'GiC', 'AGN', etc.)
    galaxy_types = ['G', 'Galaxy', 'GiC', 'Glx', 'AGN', 'LIN', 'BLL', 'SyG', 'QSO', 'BLLac']
    mask = np.array([any(gt in obj.decode('utf-8') for gt in galaxy_types) for obj in result['OTYPE']])
    filtered = result[mask]
    return filtered

# Load lens catalog, filter by redshift
cat = catalog
df = cat.to_pandas()
df['zlens'] = pd.to_numeric(df['zlens'], errors='coerce')
filtered_df = df.dropna(subset=['zlens']).reset_index(drop=True)

results = []

for i, lens in filtered_df.iterrows():
    lens_id = lens['name']
    ra = lens['RA']
    dec = lens['DEC']
    z = lens['zlens']

    print(f"Processing lens {i+1}/{len(filtered_df)}: {lens_id} (RA={ra:.4f}, DEC={dec:.4f}, z={z:.3f})")

    center_coord = SkyCoord(ra=ra, dec=dec, unit='deg')
    galaxies = query_simbad_galaxies(center_coord, radius_arcmin=0.5)

    total_mass = len(g_

import os
import time
import numpy as np
import pandas as pd
from lenscat import catalog
from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord, Angle
from astropy.table import Table
import astropy.units as u

SAVE_DIR = './lens_stellar_mass_localized'
os.makedirs(SAVE_DIR, exist_ok=True)
print(f"Results will be saved to: {SAVE_DIR}")

def query_simbad_galaxies(center_coord, radius_arcmin=0.5):
    """
    Query SIMBAD for galaxies within radius_arcmin of center_coord.
    Returns astropy Table of objects filtered to galaxy types.
    """
    custom_simbad = Simbad()
    custom_simbad.reset_votable_fields()  # clear default fields
    custom_simbad.add_votable_fields('otype', 'ra(d)', 'dec(d)')

    radius_deg = radius_arcmin / 60.0
    try:
        result = custom_simbad.query_region(center_coord, radius=Angle(radius_deg, u.deg))
    except Exception as e:
        print(f"SIMBAD query failed at RA={center_coord.ra.deg}, DEC={center_coord.dec.deg}: {e}")
        return Table(names=['RA', 'DEC', 'OTYPE'], dtype=[float, float, 'S10'])

    if result is None or len(result) == 0:
        return Table(names=['RA', 'DEC', 'OTYPE'], dtype=[float, float, 'S10'])

    # Filter for galaxy types only (e.g. 'Galaxy', 'G', 'Glx', 'GiC', 'AGN', etc.)
    galaxy_types = ['G', 'Galaxy', 'GiC', 'Glx', 'AGN', 'LIN', 'BLL', 'SyG', 'QSO', 'BLLac']
    mask = np.array([any(gt in obj.decode('utf-8') for gt in galaxy_types) for obj in result['OTYPE']])
    filtered = result[mask]
    return filtered

# Load lens catalog, filter by redshift
cat = catalog
df = cat.to_pandas()
df['zlens'] = pd.to_numeric(df['zlens'], errors='coerce')
filtered_df = df.dropna(subset=['zlens']).reset_index(drop=True)

results = []

for i, lens in filtered_df.iterrows():
    lens_id = lens['name']
    ra = lens['RA']
    dec = lens['DEC']
    z = lens['zlens']

    print(f"Processing lens {i+1}/{len(filtered_df)}: {lens_id} (RA={ra:.4f}, DEC={dec:.4f}, z={z:.3f})")

    center_coord = SkyCoord(ra=ra, dec=dec, unit='deg')
    galaxies = query_simbad_galaxies(center_coord, radius_arcmin=0.5)

    total_mass = len(galaxies) * 5e10  # Assume 5e10 Msun per galaxy (conservative)
    results.append({
        'lens_id': lens_id,
        'ra': ra,
        'dec': dec,
        'redshift': z,
        'num_galaxies': len(galaxies),
        'total_stellar_mass_Msun': total_mass
    })

    # Save incremental results after each lens processed
    results_df = pd.DataFrame(results)
    save_path = os.path.join(SAVE_DIR, 'lens_stellar_mass_localized_progress.csv')
    results_df.to_csv(save_path, index=False)

    if (i + 1) % 25 == 0 or (i + 1) == len(filtered_df):
        print(f"-- Progress: {i+1}/{len(filtered_df)} lenses --")
        print(f"Results saved to: {save_path}")

print("All done! Final results saved to:", save_path)

import os
import time
import numpy as np
import pandas as pd
from lenscat import catalog
from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord, Angle
from astropy.table import Table
import astropy.units as u

SAVE_DIR = './lens_stellar_mass_localized'
os.makedirs(SAVE_DIR, exist_ok=True)
print(f"Results will be saved to: {SAVE_DIR}")

def query_simbad_galaxies(center_coord, radius_arcmin=0.5):
    """
    Query SIMBAD for galaxies within radius_arcmin of center_coord.
    Returns astropy Table filtered for galaxy-type objects.
    """
    custom_simbad = Simbad()
    custom_simbad.reset_votable_fields()  # Clear default fields
    # Use updated field names (case-sensitive)
    custom_simbad.add_votable_fields('otype', 'ra', 'dec')

    radius_deg = radius_arcmin / 60.0
    try:
        result = custom_simbad.query_region(center_coord, radius=Angle(radius_deg, u.deg))
    except Exception as e:
        print(f"SIMBAD query failed at RA={center_coord.ra.deg}, DEC={center_coord.dec.deg}: {e}")
        return Table(names=['RA', 'DEC', 'otype'], dtype=[float, float, 'S10'])

    if result is None or len(result) == 0:
        return Table(names=['RA', 'DEC', 'otype'], dtype=[float, float, 'S10'])

    # Filter for galaxy types (case sensitive exact match)
    galaxy_types = ['G', 'Galaxy', 'GiC', 'Glx', 'AGN', 'LIN', 'BLL', 'SyG', 'QSO', 'BLLac']

    # Note: 'otype' field is bytes, decode to string before checking
    otypes = [otype.decode('utf-8') if isinstance(otype, bytes) else otype for otype in result['otype']]

    mask = [any(gt == otype for gt in galaxy_types) for otype in otypes]

    filtered = result[mask]
    return filtered

# Load lens catalog, filter by redshift
cat = catalog
df = cat.to_pandas()
df['zlens'] = pd.to_numeric(df['zlens'], errors='coerce')
filtered_df = df.dropna(subset=['zlens']).reset_index(drop=True)

results = []

for i, lens in filtered_df.iterrows():
    lens_id = lens['name']
    ra = lens['RA']
    dec = lens['DEC']
    z = lens['zlens']

    print(f"Processing lens {i+1}/{len(filtered_df)}: {lens_id} (RA={ra:.4f}, DEC={dec:.4f}, z={z:.3f})")

    center_coord = SkyCoord(ra=ra, dec=dec, unit='deg')
    galaxies = query_simbad_galaxies(center_coord, radius_arcmin=0.5)

    total_mass = len(galaxies) * 5e10  # Assume 5e10 Msun per galaxy (conservative)

    results.append({
        'lens_id': lens_id,
        'ra': ra,
        'dec': dec,
        'redshift': z,
        'num_galaxies': len(galaxies),
        'total_stellar_mass_Msun': total_mass
    })

    # Save incremental results after each lens processed
    results_df = pd.DataFrame(results)
    save_path = os.path.join(SAVE_DIR, 'lens_stellar_mass_localized_progress.csv')
    results_df.to_csv(save_path, index=False)

    if (i + 1) % 25 == 0 or (i + 1) == len(filtered_df):
        print(f"-- Progress: {i+1}/{len(filtered_df)} lenses --")
        print(f"Results saved to: {save_path}")

print("All done! Final results saved to:", save_path)

from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord, Angle
import astropy.units as u
from astropy.table import Table

# Bullet Cluster coordinates
bullet_cluster_coord = SkyCoord(ra=104.656, dec=-55.679, unit='deg')

def query_simbad_galaxies(center_coord, radius_arcmin=0.5):
    custom_simbad = Simbad()
    custom_simbad.reset_votable_fields()
    custom_simbad.add_votable_fields('otype', 'ra', 'dec')

    radius_deg = radius_arcmin / 60.0
    result = custom_simbad.query_region(center_coord, radius=Angle(radius_deg, u.deg))
    if result is None or len(result) == 0:
        print("No objects found.")
        return Table(names=['RA', 'DEC', 'otype'], dtype=[float, float, 'S10'])

    # Filter for galaxy types (example list)
    galaxy_types = ['G', 'Galaxy', 'GiC', 'Glx', 'AGN', 'LIN', 'BLL', 'SyG', 'QSO']

    otypes = [otype.decode('utf-8') if isinstance(otype, bytes) else otype for otype in result['otype']]
    mask = [otype in galaxy_types for otype in otypes]

    filtered = result[mask]
    return filtered

galaxies = query_simbad_galaxies(bullet_cluster_coord, radius_arcmin=0.5)

print(f"Galaxies found within 0.5 arcmin of Bullet Cluster center: {len(galaxies)}")
print(galaxies['ra', 'dec', 'otype'])

# Estimate stellar mass (e.g., 5e10 Msun per galaxy)
total_stellar_mass = len(galaxies) * 5e10
print(f"Estimated total stellar mass: {total_stellar_mass:.2e} Msun")

from astroquery.vizier import Vizier
from astropy.coordinates import SkyCoord
import astropy.units as u

# Coordinates of the galaxy near Bullet Cluster (from SIMBAD)
ra = 104.64583333333333  # degrees
dec = -55.67483333333333  # degrees

coord = SkyCoord(ra=ra, dec=dec, unit=(u.deg, u.deg))

# Query 2MASS catalog around that coordinate within 5 arcsec radius
vizier = Vizier(columns=['*'], catalog='II/246/out', row_limit=10)
result = vizier.query_region(coord, radius=5 * u.arcsec)

if result:
    # 2MASS catalog entries
    table = result[0]
    print(table)

    # For example, get K-band magnitude (Kmag)
    if 'Kmag' in table.colnames:
        k_mags = table['Kmag']
        print("K-band magnitudes found:", k_mags)
    else:
        print("No K-band magnitude found in query results.")
else:
    print("No 2MASS sources found near this position.")

from astroquery.irsa import Irsa
from astropy.coordinates import SkyCoord
import astropy.units as u
import pandas as pd

# Define target position
target_coord = SkyCoord(ra=104.6458, dec=-55.6748, unit='deg')

# Search radius
search_radius = 0.5 * u.arcmin

# Query WISE All-Sky catalog around the position
result = Irsa.query_region(target_coord, catalog="allwise_p3as_psd", spatial='Cone', radius=search_radius)

if len(result) == 0:
    print("No WISE sources found within 0.5 arcmin.")
else:
    # Conve

from astroquery.irsa import Irsa
from astropy.coordinates import SkyCoord
import astropy.units as u
import pandas as pd

# Define target position
target_coord = SkyCoord(ra=104.6458, dec=-55.6748, unit='deg')

# Search radius
search_radius = 0.5 * u.arcmin

# Query WISE All-Sky catalog around the position
result = Irsa.query_region(target_coord, catalog="allwise_p3as_psd", spatial='Cone', radius=search_radius)

if len(result) == 0:
    print("No WISE sources found within 0.5 arcmin.")
else:
    # Convert to pandas DataFrame for nicer output
    df = result.to_pandas()
    print(f"Found {len(df)} WISE sources within 0.5 arcmin:")
    # Display key columns: designation, ra, dec, w1mpro (W1 magnitude), w2mpro (W2 magnitude)
    display_cols = ['designation', 'ra', 'dec', 'w1mpro', 'w2mpro']
    print(df[display_cols].to_string(index=False))

import numpy as np
from astropy.cosmology import Planck18 as cosmo
from astropy import units as u

# Inputs from your WISE query & lens redshift
w1_mag = 16.684999         # apparent W1 magnitude from WISE
redshift = 0.296          # approx redshift of Bullet Cluster
M_L_w1 = 0.6              # mass-to-light ratio in W1 band (Msun/Lsun), typical value

# Step 1: Calculate luminosity distance (in parsecs)
d_L = cosmo.luminosity_distance(redshift).to(u.pc).value

# Step 2: Calculate absolute magnitude
# M = m - 5*log10(d_L / 10pc)
M_w1 = w1_mag - 5 * (np.log10(d_L) - 1)

# Step 3: Convert absolute magnitude to luminosity (in solar units)
# M_sun in W1 ~ 3.24 (Vega system, approx)
M_sun_w1 = 3.24
L_w1 = 10 ** (-0.4 * (M_w1 - M_sun_w1))

# Step 4: Estimate stellar mass
stellar_mass = M_L_w1 * L_w1  # in solar masses

print(f"Estimated stellar mass from WISE W1: {stellar_mass:.2e} Msun")

from astroquery.ned import Ned
from astropy.coordinates import SkyCoord
import astropy.units as u

coord = SkyCoord(ra=104.6458, dec=-55.6748, unit=(u.deg, u.deg))
result_table = Ned.query_region(coord, radius=0.5*u.arcmin)

print(result_table)

import ads

# Insert your ADS API token here or set it as environment variable ADS_DEV_KEY
ads.config.token = "YOUR_ADS_API_TOKEN"

object_names = [
    "[FBC2017] J065835.0-554029.4",
    "[FBC2017] J065836.4-554006.9",
    "WISEA J065837.94-554032.6"
]

def search_ads_by_object_name(name, rows=5):
    papers = list(ads.SearchQuery(q=name, fl=['title', 'author', 'year', 'bibcode'], rows=rows))
    if not papers:
        print(f"No papers found for {name}")
    else:
        print(f"Papers for {name}:")
        for paper in papers:
            print(f"- {paper.year} | {paper.title} | {paper.bibcode}")

for obj in object_names:
    search_ads_by_object_name(obj)
    print()

# Optional: Search by coordinates (e.g., within 1 arcmin radius)
from astropy.coordinates import SkyCoord
import astropy.units as u

coords = SkyCoord(ra=104.645833, dec=-55.674833, unit='deg')

def search_ads_by_coord(coord, radius_arcmin=1, rows=5):
    q = f"ra:{coord.ra.degree} dec:{coord.dec.degree} radius:{radius_arcmin}m"
    papers = list(ads.SearchQuery(q=q, fl=['title', 'author', 'year', 'bibcode'], rows=rows))
    if not papers:
        print(f"No papers found near RA={coord.ra.degree}, DEC={coord.dec.degree}")
    else:
        print(f"Papers near RA={coord.ra.degree}, DEC={coord.dec.degree}:")
        for paper in papers:
            print(f"- {paper.year} | {paper.title} | {paper.bibcode}")

search_ads_by_coord(coords)

import ads

# Replace with your actual ADS API token (generate at https://ui.adsabs.harvard.edu/settings/token)
ads.config.token = "YOUR_REAL_ADS_API_TOKEN"

def search_ads_by_object_name(object_name, max_results=10):
    """
    Query ADS for papers related to a specific astronomical object by name.
    """
    query = ads.SearchQuery(q=f'object:"{object_name}"',
                            fl=['title', 'author', 'year', 'bibcode'],
                            rows=max_results)
    results = list(query)
    if results:
        print(f"Papers found for object '{object_name}':\n")
        for i, paper in enumerate(results, 1):
            title = paper.title[0] if paper.title else "No Title"
            authors = ', '.join(paper.author) if paper.author else "Unknown Authors"
            year = paper.year if paper.year else "Unknown Year"
            bibcode = paper.bibcode if paper.bibcode else "No Bibcode"
            print(f"{i}. {title} ({year})")
            print(f"   Authors: {authors}")
            print(f"   Bibcode: {bibcode}\n")
    else:
        print(f"No papers found for object '{object_name}'.")

# Example: search for papers on the galaxy near Bullet Cluster you found
object_name = "WISEA J065837.94-554032.6"

try:
    search_ads_by_object_name(object_name)
except Exception as e:
    print(f"Error during ADS search: {e}")



from astroquery.vizier import Vizier
from astroquery.irsa import Irsa
from astropy.coordinates import SkyCoord
import astropy.units as u
import numpy as np

# Coordinates for your Bullet Cluster galaxy
ra_deg = 104.6581
dec_deg = -55.6757
coord = SkyCoord(ra=ra_deg*u.deg, dec=dec_deg*u.deg, frame='icrs')

# Search radius (0.5 arcmin)
radius = 0.5 * u.arcmin

def query_2mass(coord, radius):
    print("Querying 2MASS near position...")
    Vizier.ROW_LIMIT = 5
    catalogs = ['II/246/out']  # 2MASS PSC
    result = Vizier.query_region(coord, radius=radius, catalog=catalogs)
    if len(result) == 0:
        print("No 2MASS sources found.")
        return None
    return result[0]

def query_wise(coord, radius):
    print("Querying WISE near position...")
    Vizier.ROW_LIMIT = 5
    catalogs = ['II/328/allwise']  # AllWISE catalog
    result = Vizier.query_region(coord, radius=radius, catalog=catalogs)
    if len(result) == 0:
        print("No WISE sources found.")
        return None
    return result[0]

def query_panstarrs(coord, radius):
    print("Querying Pan-STARRS near position...")
    Vizier.ROW_LIMIT = 5
    catalogs = ['II/349/ps1']  # Pan-STARRS DR1
    result = Vizier.query_region(coord, radius=radius, catalog=catalogs)
    if len(result) == 0:
        print("No Pan-STARRS sources found.")
        return None
    return result[0]

# Query catalogs
twomass = query_2mass(coord, radius)
wise = query_wise(coord, radius)
ps = query_panstarrs(coord, radius)

# Extract magnitudes (choose nearest source if multiple)
def get_closest_source(table):
    if table is None or len(table) == 0:
        return None
    # Compute angular separation
    coords = SkyCoord(ra=table['RAJ2000'], dec=table['DEJ2000'], unit=(u.deg, u.deg))
    separations = coords.separation(coord)
    idx = np.argmin(separations)
    return table[idx]

twomass_src = get_closest_source(twomass)
wise_src = get_closest_source(wise)
ps_src = get_closest_source(ps)

print("\nBest matches within 0.5 arcmin:")

if twomass_src is not None:
    print(f"2MASS J: {twomass_src['Jmag']:.3f}, H: {twomass_src['Hmag']:.3f}, K: {twomass_src['Kmag']:.3f}")
else:
    print("No 2MASS source found.")

if wise_src is not None:
    print(f"WISE W1: {wise_src['W1mpro']:.3f}, W2: {wise_src['W2mpro']:.3f}")
else:
    print("No WISE source found.")

if ps_src is not None:
    print(f"Pan-STARRS g: {ps_src['gmag']:.3f}, r: {ps_src['rmag']:.3f}, i: {ps_src['imag']:.3f}, z: {ps_src['zmag']:.3f}, y: {ps_src['ymag']:.3f}")
else:
    print("No Pan-STARRS source found.")

# Simple WISE color-based stellar mass estimate (Cluver+2014)
# log10(M*/L_W1) = -2.54*(W1 - W2) - 0.17

if wise_src is not None:
    W1 = wise_src['W1mpro']
    W2 = wise_src['W2mpro']
    # Use distance modulus to get absolute magnitude
    from astropy.cosmology import Planck18 as cosmo
    import numpy as np
    from astropy import units as u

    z = 0.296  # Bullet Cluster redshift
    d_L = cosmo.luminosity_distance(z).to(u.pc).value
    abs_W1 = W1 - 5 * (np.log10(d_L) - 1)

    # Sun absolute magnitude in W1 ~ 3.24 (Vega system)
    M_sun_W1 = 3.24

    # Calculate L_W1 / L_sun
    L_W1 = 10 ** (-0.4 * (abs_W1 - M_sun_W1))

    # Calculate M*/L_W1 ratio
    ml_log = -2.54 * (W1 - W2) - 0.17
    ml_ratio = 10 ** ml_log

    stellar_mass = ml_ratio * L_W1

    print(f"\nWISE color-based stellar mass estimate: {stellar_mass:.2e} Msun")

else:
    print("\nWISE data unavailable for stellar mass estimate.")

import time
from astroquery.vizier import Vizier
from astroquery.irsa import Irsa
from astropy.coordinates import SkyCoord
import astropy.units as u
import numpy as np

ra_deg = 104.6581
dec_deg = -55.6757
coord = SkyCoord(ra=ra_deg*u.deg, dec=dec_deg*u.deg, frame='icrs')
radius = 0.5 * u.arcmin

def query_with_retries(catalogs, coord, radius, max_retries=3, delay=5):
    Vizier.ROW_LIMIT = 5
    for attempt in range(max_retries):
        try:
            results = Vizier.query_region(coord, radius=radius, catalog=catalogs)
            if len(results) > 0:
                return results[0]
            else:
                print(f"No sources found in {catalogs}")
                return None
        except Exception as e:
            print(f"Error querying {catalogs} (attempt {attempt+1}): {e}")
            if attempt < max_retries - 1:
                print(f"Retrying in {delay} seconds...")
                time.sleep(delay)
            else:
                print("Max retries reached. Skipping.")
                return None

print("Querying 2MASS...")
twomass = query_with_retries(['II/246/out'], coord, radius)

print("Querying WISE...")
wise = query_with_retries(['II/328/allwise'], coord, radius)

print("Querying Pan-STARRS...")
ps = query_with_retries(['II/349/ps1'], coord, radius)

# Continue with extracting and processing data as before...

from astroquery.irsa import Irsa
from astropy.coordinates import SkyCoord
import astropy.units as u

# Coordinates of the galaxy found near Bullet Cluster (from prior query)
ra_deg = 104.64583333333333  # Replace with your exact RA
dec_deg = -55.67483333333333  # Replace with your exact DEC
coord = SkyCoord(ra=ra_deg, dec=dec_deg, unit=(u.deg, u.deg))

search_radius = 0.5 * u.arcmin  # 0.5 arcmin radius, localized

# Query 2MASS PSC (Point Source Catalog) for NIR photometry J, H, K bands
print("Querying 2MASS PSC near position...")
two_mass_results = Irsa.query_region(coord, catalog='fp_psc', spatial='Cone', radius=search_radius)

if len(two_mass_results) == 0:
    print("No 2MASS sources found near this position.")
else:
    print(f"Found {len(two_mass_results)} 2MASS sources:")
    for row in two_mass_results:
        print(f"Designation: {row['designation']}, J: {row['j_m']}, H: {row['h_m']}, K: {row['k_m']}")

# Query WISE All-Sky catalog for W1 and W2 bands
print("\nQuerying WISE All-Sky near position...")
wise_results = Irsa.query_region(coord, catalog='allwise_p3as_psd', spatial='Cone', radius=search_radius)

if len(wise_results) == 0:
    print("No WISE sources found near this position.")
else:
    print(f"Found {len(wise_results)} WISE sources:")
    for row in wise_results:
        print(f"Designation: {row['designation']}, W1: {row['w1mpro']}, W2: {row['w2mpro']}")

# From here, you can use these magnitudes to estimate stellar mass
# using the W1 band M/L ratio method as before, or do combined color-based methods.

import numpy as np
from astropy.cosmology import Planck18 as cosmo
from astropy import units as u

# WISE source photometry
w1_mag = 16.685  # W1 apparent mag
w2_mag = 16.451  # W2 apparent mag

redshift = 0.296  # Approx redshift of Bullet Cluster

# Step 1: Calculate luminosity distance in parsecs
d_L = cosmo.luminosity_distance(redshift).to(u.pc).value

# Step 2: Calculate absolute magnitude
M_w1 = w1_mag - 5 * (np.log10(d_L) - 1)

# Step 3: Estimate mass-to-light ratio (M/L) - simple fixed value or color-based
# Simple fixed M/L in W1 band:
M_L_w1 = 0.6  # Msun/Lsun, typical for old stellar pops

# Optional: color-based M/L adjustment (from e.g., Cluver+ 2014):
w1_w2_color = w1_mag - w2_mag
M_L_w1 = 10 ** (-0.17 - 1.12 * w1_w2_color)  # empirical fit example

# Step 4: Convert absolute magnitude to luminosity (solar units)
M_sun_w1 = 3.24  # Sun's W1 absolute mag approx.
L_w1 = 10 ** (-0.4 * (M_w1 - M_sun_w1))

# Step 5: Stellar mass estimate
stellar_mass = M_L_w1 * L_w1  # in solar masses

print(f"Estimated stellar mass from WISE W1: {stellar_mass:.2e} Msun")

import numpy as np
import pandas as pd

# === INPUT ===
stellar_mass = 3.86e10  # Msun, from WISE estimate
radius_kpc = 5  # assume 5 kpc Einstein radius
cdm_threshold = 1e8  # Msun/kpc^2

# === CALC SURFACE DENSITY ===
area_kpc2 = np.pi * radius_kpc**2
stellar_surface_density = stellar_mass / area_kpc2  # Msun/kpc^2

print(f"Stellar surface density: {stellar_surface_density:.2e} Msun/kpc^2")

# === TEST THRESHOLDS ===
f_star_values = np.arange(0.01, 0.21, 0.01)
results = []

for f_star in f_star_values:
    inferred_total = stellar_surface_density / f_star
    below = inferred_total < cdm_threshold
    results.append({
        'f_star': round(f_star, 3),
        'inferred_total_surface_density': round(inferred_total, 2),
        'below_CDM_threshold': below
    })

results_df = pd.DataFrame(results)
print("\nThreshold check for single lens:")
print(results_df.to_string(index=False))

import ads

# Replace with your actual ADS API token
ads.config.token = "YOUR_REAL_ADS_API_TOKEN"

def search_ads_by_object_name(object_name, max_results=5):
    papers = list(ads.SearchQuery(q=f'object:"{object_name}"', rows=max_results))
    if papers:
        for i, paper in enumerate(papers, 1):
            print(f"{i}. {paper.title[0]}")
            print(f"   Authors: {', '.join(paper.author) if paper.author else 'N/A'}")
            print(f"   Year: {paper.year}")
            print(f"   Bibcode: {paper.bibcode}")
            print(f"   Abstract: {paper.abstract[:200]}...\n")
    else:
        print(f"No papers found for object '{object_name}'.")

# Example: search by the WISEA J065837.94-554032.6 name you found
search_ads_by_object_name("WISEA J065837.94-554032.6")

ads.config.token = "paste-your-new-token-here"

import ads
ads.config.token = "YOUR_NEW_ADS_API_TOKEN"

!pip install ads

import pandas as pd
from astropy.cosmology import Planck18 as cosmo
import astropy.units as u
import numpy as np

# Constants
M_star_bullet = 5e10  # Msun
radius_arcmin = 0.5
redshift_bullet = 0.296

# Angular radius in radians
theta_rad = (radius_arcmin / 60) * (np.pi / 180)

# Angular diameter distance in Mpc
d_a = cosmo.angular_diameter_distance(redshift_bullet).to(u.Mpc).value

# Physical radius in Mpc
r_phys = theta_rad * d_a

# Area in Mpc^2
area_mpc2 = np.pi * r_phys**2

# Stellar mass surface density Msun/Mpc^2
sigma_star = M_star_bullet / area_mpc2

# Prepare DataFrame in same format as your 912 lenses data
df_bullet = pd.DataFrame({
    'mass_surface_density_Msun_per_Mpc2': [sigma_star],
    'redshift': [redshift_bullet]
})

print(df_bullet)

import pandas as pd
import numpy as np
from astropy.cosmology import Planck18 as cosmo
import astropy.units as u

# --- Configuration ---

# Stellar mass in solar masses (from your SIMBAD estimate)
M_star_bullet = 5e10  # Msun

# Aperture radius for mass calculation in arcminutes (0.5 arcmin = 30 arcseconds)
radius_arcmin = 0.5

# Redshift of the Bullet Cluster
redshift_bullet = 0.296

# CDM total mass surface density threshold in Msun/kpc^2
CDM_THRESHOLD = 1e8

# --- Calculations ---

# Convert radius from arcmin to radians
theta_rad = (radius_arcmin / 60) * (np.pi / 180)

# Calculate angular diameter distance at Bullet Cluster redshift in Mpc
d_a = cosmo.angular_diameter_distance(redshift_bullet).to(u.Mpc).value

# Convert angular radius to physical radius in Mpc
r_phys = theta_rad * d_a

# Calculate area in physical units (Mpc^2)
area_mpc2 = np.pi * r_phys**2

# Calculate stellar mass surface density (Msun/Mpc^2)
sigma_star_mpc2 = M_star_bullet / area_mpc2

# Convert stellar surface density to Msun/kpc^2 for comparison
sigma_star_kpc2 = sigma_star_mpc2 / 1e6

# Prepare DataFrame as input for threshold comparison
df_bullet = pd.DataFrame({
    'mass_surface_density_Msun_per_kpc2': [sigma_star_kpc2],
    'redshift': [redshift_bullet]
})

print(f"Bullet Cluster stellar mass surface density: {sigma_star_kpc2:.2e} Msun/kpc^2\n")

# --- Threshold Analysis ---

f_star_values = np.arange(0.01, 0.21, 0.01)  # 1% to 20% stellar baryon fraction

total_lenses = len(df_bullet)

results = []
for f_star in f_star_values:
    # Inferred total mass surface density = stellar / f_star
    inferred_total_mass = df_bullet['mass_surface_density_Msun_per_kpc2'] / f_star
    below_threshold_count = (inferred_total_mass < CDM_THRESHOLD).sum()
    percent_below = 100 * below_threshold_count / total_lenses
    results.append({
        'f_star': round(f_star, 3),
        'lenses_below_threshold': below_threshold_count,
        'percent_below_threshold': round(percent_below, 2)
    })

results_df = pd.DataFrame(results)

print("Bullet Cluster CDM Threshold Analysis:\n")
print(results_df.to_string(index=False))

!pip install lenscat astroquery astropy pandas numpy

import os
import time
import numpy as np
import pandas as pd
from lenscat import catalog
from astroquery.vizier import Vizier
from astropy.coordinates import SkyCoord, Angle
from astropy.table import vstack, Table
import astropy.units as u
from astropy.cosmology import Planck18 as cosmo

# === CONFIGURATION ===
SAVE_DIR = './lens_stellar_mass_kband_localized'
os.makedirs(SAVE_DIR, exist_ok=True)
print(f"Results will be saved to: {SAVE_DIR}")

SEARCH_RADIUS_ARCMIN = 0.5  # small radius around lens in arcminutes

# Vizier catalog for 2MASS Extended Source Catalog (XSC)
# K-band magnitude column: 'Kmag'
# Catalog reference: VII/233/xsc (2MASS XSC)
vizier = Vizier(columns=['RAJ2000', 'DEJ2000', 'Kmag'], row_limit=-1)
vizier.ROW_LIMIT = -1

# Load lens catalog and filter valid redshifts
cat = catalog
df_lenses = cat.to_pandas()
df_lenses['zlens'] = pd.to_numeric(df_lenses['zlens'], errors='coerce')
df_lenses = df_lenses.dropna(subset=['zlens']).reset_index(drop=True)

def query_2mass_kband(center_coord, radius_arcmin):
    """Query 2MASS XSC catalog around center_coord within radius_arcmin."""
    radius_deg = radius_arcmin / 60.0
    result = vizier.query_region(center_coord, radius=radius_deg * u.deg, catalog='VII/233/xsc')
    if len(result) == 0:
        return Table(names=['RAJ2000', 'DEJ2000', 'Kmag'], dtype=[float, float, float])
    else:
        return result[0]

def kband_to_stellar_mass(kmag):
    """
    Convert K-band apparent magnitude to stellar mass (Msun).
    Assumes:
    - A mass-to-light ratio M/L_K ~ 0.6 (typical for old stellar populations)
    - Distance modulus from lens redshift
    - Absolute magnitude of the Sun in K band M_Ksun = 3.28
    """
    M_Ksun = 3.28
    M_L_ratio = 0.6  # can be adjusted if needed

    # Convert apparent magnitude to absolute magnitude assuming lens redshift distance
    # We must compute distance modulus = 5 * log10(D_L / 10pc)
    # D_L = luminosity distance in parsec

    # Note: This function will be used inside loop where we know redshift, so redshift must be passed separately.
    # To simplify, we will pass redshift as global or parameter (see usage below).
    raise NotImplementedError("This function requires redshift to convert apparent mag to absolute mag.")

def compute_stellar_mass_for_galaxies(galaxies, redshift):
    """
    Compute total stellar mass from K-band magnitudes for galaxies near a lens.
    """
    if len(galaxies) == 0:
        return 0.0
    M_Ksun = 3.28
    M_L_ratio = 0.6  # stellar mass-to-light ratio in K band

    # Calculate distance modulus
    d_lum = cosmo.luminosity_distance(redshift).to(u.pc).value
    dist_mod = 5 * np.log10(d_lum / 10)

    # Convert apparent magnitudes to absolute magnitudes
    abs_mags = galaxies['Kmag'] - dist_mod

    # Convert absolute magnitude to luminosity (in solar units)
    luminosities = 10**(-0.4 * (abs_mags - M_Ksun))

    # Stellar mass = luminosity * M/L ratio
    masses = luminosities * M_L_ratio * 1e10  # times 1e10 Msun normalization

    total_mass = np.sum(masses)
    return total_mass

results = []

for i, lens in df_lenses.iterrows():
    lens_id = lens['name']
    ra = lens['RA']
    dec = lens['DEC']
    z = lens['zlens']

    print(f"Processing lens {i+1}/{len(df_lenses)}: {lens_id} (RA={ra:.4f}, DEC={dec:.4f}, z={z:.3f})")

    center_coord = SkyCoord(ra=ra, dec=dec, unit='deg')
    galaxies = query_2mass_kband(center_coord, SEARCH_RADIUS_ARCMIN)

    total_mass = compute_stellar_mass_for_galaxies(galaxies, z)

    # Calculate surface mass density within circular aperture in Msun/Mpc^2
    theta_rad = SEARCH_RADIUS_ARCMIN * (np.pi / 180) / 60
    d_a = cosmo.angular_diameter_distance(z).to(u.Mpc).value
    radius_mpc = theta_rad * d_a
    area_mpc2 = np.pi * radius_mpc**2
    surface_density = total_mass / area_mpc2 if area_mpc2 > 0 else np.nan

    results.append({
        'lens_id': lens_id,
        'ra': ra,
        'dec': dec,
        'redshift': z,
        'total_stellar_mass_Msun': total_mass,
        'mass_surface_density_Msun_per_Mpc2': surface_density,
        'number_of_galaxies': len(galaxies)
    })

    # Save after every 25 lenses
    if (i + 1) % 25 == 0 or (i + 1) == len(df_lenses):
        df_results = pd.DataFrame(results)
        save_path = os.path.join(SAVE_DIR, 'lens_stellar_mass_kband_localized.csv')
        df_results.to_csv(save_path, index=False)
        print(f"Saved progress: {i+1}/{len(df_lenses)} lenses processed.")

    time.sleep(0.5)  # to be polite to Vizier server

print(f"All done! Results saved to {save_path}")

from astroquery.vizier import Vizier
from astropy.coordinates import SkyCoord
import astropy.units as u
from astropy.cosmology import Planck18 as cosmo
import numpy as np

# Bullet Cluster coords & redshift
RA_BULLET = 104.65
DEC_BULLET = -55.67
Z_BULLET = 0.296
SEARCH_RADIUS_ARCMIN = 0.5

# Setup Vizier for 2MASS Extended Source Catalog
vizier = Vizier(columns=['RAJ2000', 'DEJ2000', 'Kmag'], row_limit=-1)
vizier.ROW_LIMIT = -1

def query_2mass_kband(center_coord, radius_arcmin):
    radius_deg = radius_arcmin / 60.0
    result = vizier.query_region(center_coord, radius=radius_deg * u.deg, catalog='VII/233/xsc')
    if len(result) == 0:
        return None
    return result[0]

def compute_stellar_mass(galaxies, redshift):
    if galaxies is None or len(galaxies) == 0:
        print("No galaxies found in region.")
        return 0.0

    M_Ksun = 3.28
    M_L_ratio = 0.6

    # Compute distance modulus
    d_lum = cosmo.luminosity_distance(redshift).to(u.pc).value
    dist_mod = 5 * np.log10(d_lum / 10)

    # Check if 'Kmag' column exists
    if 'Kmag' not in galaxies.colnames:
        print("No Kmag column found in 2MASS data.")
        return 0.0

    abs_mags = galaxies['Kmag'] - dist_mod
    luminosities = 10 ** (-0.4 * (abs_mags - M_Ksun))
    masses = luminosities * M_L_ratio * 1e10  # Msun

    total_mass = np.sum(masses)
    return total_mass

# Query Bullet Cluster region
center = SkyCoord(ra=RA_BULLET, dec=DEC_BULLET, unit='deg')
galaxies = query_2mass_kband(center, SEARCH_RADIUS_ARCMIN)

if galaxies is not None:
    print(f"Galaxies found within {SEARCH_RADIUS_ARCMIN} arcmin of Bullet Cluster center: {len(galaxies)}")
    print(galaxies[['RAJ2000', 'DEJ2000', 'Kmag']])
else:
    print(f"No galaxies found within {SEARCH_RADIUS_ARCMIN} arcmin.")

# Compute stellar mass
total_stellar_mass = compute_stellar_mass(galaxies, Z_BULLET)
print(f"Estimated total stellar mass: {total_stellar_mass:.2e} Msun")

# Compute surface density
theta_rad = SEARCH_RADIUS_ARCMIN * (np.pi / 180) / 60
d_a = cosmo.angular_diameter_distance(Z_BULLET).to(u.Mpc).value
radius_mpc = theta_rad * d_a
area_mpc2 = np.pi * radius_mpc**2
surface_density = total_stellar_mass / area_mpc2 if area_mpc2 > 0 else np.nan

print(f"Stellar mass surface density within {SEARCH_RADIUS_ARCMIN} arcmin: {surface_density:.2e} Msun/Mpc^2")

# Install astroquery if not already installed
try:
    import astroquery
except ImportError:
    !pip install astroquery

from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord
import astropy.units as u

# Bullet Cluster center coordinates (based on literature)
bullet_ra = 104.635  # degrees
bullet_dec = -55.949  # degrees
search_radius_arcmin = 0.5  # very localized search

# Prepare the query
custom_simbad = Simbad()
custom_simbad.TIMEOUT = 60
custom_simbad.remove_votable_fields('coordinates')  # simplify output
custom_simbad.add_votable_fields('otype', 'ra(d)', 'dec(d)')

center_coord = SkyCoord(ra=bullet_ra * u.deg, dec=bullet_dec * u.deg, frame='icrs')

# Query SIMBAD around the Bullet Cluster center
results = custom_simbad.query_region(center_coord, radius=search_radius_arcmin * u.arcmin)

# Filter for galaxies
if results is not None:
    galaxies = results[results['OTYPE'].str.contains('Galaxy', case=False, na=False)]
    if len(galaxies) > 0:
        print(f"Galaxies found within {search_radius_arcmin}′ of Bullet Cluster center:")
        for row

# Install astroquery if not already installed
try:
    import astroquery
except ImportError:
    !pip install astroquery

from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord
import astropy.units as u

# Bullet Cluster center coordinates
bullet_ra = 104.635  # degrees
bullet_dec = -55.949  # degrees
search_radius_arcmin = 0.5

# Prepare SIMBAD query
custom_simbad = Simbad()
custom_simbad.TIMEOUT = 60
custom_simbad.remove_votable_fields('coordinates')
custom_simbad.add_votable_fields('otype', 'ra(d)', 'dec(d)')

center_coord = SkyCoord(ra=bullet_ra * u.deg, dec=bullet_dec * u.deg, frame='icrs')

# Query region
results = custom_simbad.query_region(center_coord, radius=search_radius_arcmin * u.arcmin)

# Check results
if results is not None:
    galaxies = results[results['OTYPE'].str.contains('Galaxy', case=False, na=False)]
    if len(galaxies) > 0:
        print(f"Galaxies found within {search_radius_arcmin}′ of Bullet Cluster center:")
        for row in galaxies:
            print(f" - {row['MAIN_ID']} (RA={row['RA_d']:.5f}, DEC={row['DEC_d']:.5f}) — Type: {row['OTYPE']}")
    el

from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord
import astropy.units as u

# Bullet Cluster center
bullet_ra = 104.635  # degrees
bullet_dec = -55.949  # degrees
search_radius_arcmin = 0.5

# Set up custom fields
custom_simbad = Simbad()
custom_simbad.TIMEOUT = 60
custom_simbad.add_votable_fields('otype', 'ra(d)', 'dec(d)')

# Define search coordinate
center_coord = SkyCoord(ra=bullet_ra * u.deg, dec=bullet_dec * u.deg, frame='icrs')

# Query the region
results = custom_simbad.query_region(center_coord, radius=search_radius_arcmin * u.arcmin)

# Parse results
if results is not None:
    galaxies = results[results['OTYPE'].astype(str).str.contains('Galaxy', case=False, na=False)]
    if len(galaxies) > 0:
        print(f"Galaxies within {search_radius_arcmin}′ of Bullet Cluster center:")
        for row in galaxies:
            print(f" - {row['MAIN_ID'].decode('utf-8') if isinstance(row['MAIN_ID'], bytes) else row['MAIN_ID']}, "
                  f"RA={row['RA_d']:.5f}, DEC={row['DEC_d']:.5f}, Type={row['OTYPE']}")
    else:
        print(f"N

!pip install astroquery

from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord
import astropy.units as u

# Bullet Cluster center
bullet_ra = 104.635  # degrees
bullet_dec = -55.949  # degrees
search_radius_arcmin = 0.5

# Set up custom fields
custom_simbad = Simbad()
custom_simbad.TIMEOUT = 60
custom_simbad.add_votable_fields('otype', 'ra(d)', 'dec(d)')

# Define search coordinate
center_coord = SkyCoord(ra=bullet_ra * u.deg, dec=bullet_dec * u.deg, frame='icrs')

# Query the region
results = custom_simbad.query_region(center_coord, radius=search_radius_arcmin * u.arcmin)

# Parse results
if results is not None:
    galaxies = results[results['OTYPE'].astype(str).str.contains('Galaxy', case=False, na=False)]
    if len(galaxies) > 0:
        print(f"Galaxies within {search_radius_arcmin}′ of Bullet Cluster center:")
        for row in galaxies:
            print(f" - {row['MAIN_ID'].decode('utf-8') if isinstance(row['MAIN_ID'], bytes) else row['MAIN_ID']}, "
                  f"RA={row['RA_d']:.5f}, DEC={row['DEC_d']:.5f}, Type={row['OTYPE']}")
    else:
        print(f"No galaxies classified as 'Galaxy' found within {search_radius_arcmin}′.")
else:
    print("No SIMBAD objects found in the region.")

from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord
import astropy.units as u

# Bullet Cluster center coordinates
bullet_ra = 104.635  # degrees
bullet_dec = -55.949  # degrees
search_radius_arcmin = 0.5

# Setup Simbad with correct fields
custom_simbad = Simbad()
custom_simbad.TIMEOUT = 60
custom_simbad.add_votable_fields('otype', 'ra', 'dec')

# Define coordinate
center_coord = SkyCoord(ra=bullet_ra * u.deg, dec=bullet_dec * u.deg, frame='icrs')

# Query
results = custom_simbad.query_region(center_coord, radius=search_radius_arcmin * u.arcmin)

# Parse results
if results is not None:
    galaxies = results[results['OTYPE_V'].astype(str).str.contains('Galaxy', case=False, na=False)]
    if len(galaxies) > 0:
        print(f"Galaxies within {search_radius_arcmin}′ of Bullet Cluster center:")
        for row in galaxies:
            print(f" - {row['MAIN_ID']}, RA={row['RA']:.5f}, DEC={row['DEC']:.5f}, Type={row['OTYPE_V']}")
    else:
        print("No galaxy-type objects found.")
else:
    print("No SIMBAD objects found.")

from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord
import astropy.units as u

# Bullet Cluster center coordinates (from literature or lenscat)
ra_bullet = 104.656  # degrees
dec_bullet = -55.958  # degrees

# Search radius
search_radius_arcmin = 0.5  # arcmin

# Set up custom Simbad query
custom_simbad = Simbad()
custom_simbad.TIMEOUT = 60
custom_simbad.remove_votable_fields()  # remove all optional fields
custom_simbad.add_votable_fields('otype', 'ra', 'dec')

# Query region
coord = SkyCoord(ra_bullet, dec_bullet, unit='deg', frame='icrs')
results = custom_simbad.query_region(coord, radius=search_radius_arcmin * u.arcmin)

# Safely check for galaxy-type objects
if results is not None and 'OTYPE' in results.colnames:
    galaxies = results[results['OTYPE'].astype(str).str.contains('Galaxy', case=False, na=False)]
    if len(galaxies) > 0:
        print(f"Galaxies within {search_radius_arcmin}′ of Bullet Cluster center:")
        for row in galaxies:
            print(f"- {row['MAIN_ID'].decode('utf-8')} (otype: {row['OTYPE']}) at RA={row['RA']}, DEC={row['DEC']}")
    else:
        print(f"No galaxies found within {search_radius_arcmin}′.")
else:
    print("No SIMBAD results found or 'OTYPE' field missi

from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord
import astropy.units as u

# Bullet Cluster center coordinates
ra_bullet = 104.656  # degrees
dec_bullet = -55.958  # degrees

# Search radius
search_radius_arcmin = 0.5  # arcmin

# Set up custom Simbad query
custom_simbad = Simbad()
custom_simbad.TIMEOUT = 60
custom_simbad.remove_votable_fields()  # removes all optional fields
custom_simbad.add_votable_fields('otype', 'ra', 'dec')

# Query region
coord = SkyCoord(ra_bullet, dec_bullet, unit='deg', frame='icrs')
results = custom_simbad.query_region(coord, radius=search_radius_arcmin * u.arcmin)

# Safely check for galaxy-type objects
if results is not None and 'OTYPE' in results.colnames:
    galaxies = results[results['OTYPE'].astype(str).str.contains('Galaxy', case=False, na=False)]
    if len(galaxies) > 0:
        print(f"Galaxies within {search_radius_arcmin}′ of Bullet Cluster center:")
        for row in galaxies:
            print(f"- {row['MAIN_ID'].decode('utf-8')} (otype: {row['OTYPE']}) at RA={row['RA']}, DEC={row['DEC']}")
    else:
        print(f"No galaxies found within {search_radius_arcmin}′.")
else:
    print("No SIMBAD results found or 'OTYPE' field missing.")

from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord
import astropy.units as u

# Bullet Cluster center coordinates
ra_bullet = 104.656  # degrees
dec_bullet = -55.958  # degrees

# Search radius
search_radius_arcmin = 0.5  # arcmin

# Set up custom Simbad query
custom_simbad = Simbad()
custom_simbad.TIMEOUT = 60
custom_simbad.VOTABLE_FIELDS.clear()  # This is the correct way to remove optional fields
custom_simbad.add_votable_fields('otype', 'ra', 'dec')

# Query region
coord = SkyCoord(ra_bullet, dec_bullet, unit='deg', frame='icrs')
results = custom_simbad.query_region(coord, radius=search_radius_arcmin * u.arcmin)

# Safely check for galaxy-type objects
if results is not None and 'OTYPE' in results.colnames:
    galaxies = results[results['OTYPE'].astype(str).str.contains('Galaxy', case=False, na=False)]
    if len(galaxies) > 0:
        print(f"Galaxies within {search_radius_arcmin}′ of Bullet Cluster center:")
        for row in galaxies:
            print(f"- {row['MAIN_ID']} (otype: {row['OTYPE']}) at RA={row['RA']}, DEC={row['DEC']}")
    else:
        print(f"No galaxies found within {search_radius_arcmin}′.")
else:
    print("No SIMBAD results found or 'OTYPE' field missing.")

from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord
import astropy.units as u

# Bullet Cluster center coordinates
ra_bullet = 104.656  # degrees
dec_bullet = -55.958  # degrees

# Search radius
search_radius_arcmin = 0.5  # arcmin

# Set up custom Simbad query
custom_simbad = Simbad()
custom_simbad.TIMEOUT = 60
custom_simbad.reset_votable_fields()  # This is the correct way
custom_simbad.add_votable_fields('otype', 'ra', 'dec')

# Query region
coord = SkyCoord(ra_bullet, dec_bullet, unit='deg', frame='icrs')
results = custom_simbad.query_region(coord, radius=search_radius_arcmin * u.arcmin)

# Safely check for galaxy-type objects
if results is not None and 'OTYPE' in results.colnames:
    galaxies = results[results['OTYPE'].astype(str).str.contains('Galaxy', case=False, na=False)]
    if len(galaxies) > 0:
        print(f"Galaxies within {search_radius_arcmin}′ of Bullet Cluster center:")
        for row in galaxies:
            print(f"- {row['MAIN_ID']} (otype: {row['OTYPE']}) at RA={row['RA']}, DEC={row['DEC']}")
    else:
        print(f"No galaxies found within {search_radius_arcmin}′.")
else:
    print("No SIMBAD results found or 'OTYPE' field missing.")

from astroquery.simbad import Simbad
from astropy.coordinates import SkyCoord
import astropy.units as u

# Coordinates of the Bullet Cluster center (J2000)
ra_bullet = 104.656  # degrees
dec_bullet = -55.958  # degrees
search_radius_arcmin = 0.5  # arcminutes

# Setup custom SIMBAD query
custom_simbad = Simbad()
custom_simbad.TIMEOUT = 60
custom_simbad.reset_votable_fields()  # Clears default fields
custom_simbad.add_votable_fields('otype', 'ra', 'dec')  # Add only needed fields

# Define coordinate object
center_coord = SkyCoord(ra=ra_bullet, dec=dec_bullet, unit='deg', frame='icrs')

# Perform query around center coordinate with radius
result = custom_simbad.query_region(center_coord, radius=search_radius_arcmin * u.arcmin)

# Check if result is None or empty
if result is None or len(result) == 0:
    print(f"No SIMBAD objects found within {search_radius_arcmin} arcmin of Bullet Cluster center.")
else:
    # Check if 'otype' column exists, handle case
    if 'otype' in result.colnames:
        # Filter only galaxy-type objects (case-insensitive)
        galaxies = [row for row in result if 'galaxy' in row['otype'].lower()]
        if len(galaxies) > 0:
            print(f"Galaxies within {search_radius_arcmin} arcmin of Bullet Cluster center:")
            for row in galaxies:
                print(f"  - {row['MAIN_ID'].decode('utf-8') if isinstance(row['MAIN_ID'], bytes) else row['MAIN_ID']} "
                      f"(otype: {row['otype']}, RA: {row['ra']}, DEC: {row['dec']})")
        else:
            print(f"No galaxies found within {search_radius_arcmin} arcmin.")
    else:
        print("SIMBAD query returned results but 'otype' field is missing.")

!pip install lenscat astroquery astropy pandas numpy

!pip install --upgrade astroquery

!pip install astroquery

!pip install lenscat

from lenscat import catalog